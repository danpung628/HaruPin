package com.example.harupin.ui.screen

import android.app.DatePickerDialog
import android.content.pm.PackageManager
import android.icu.util.Calendar
import android.net.Uri
import android.os.Build
import android.widget.Toast
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.DateRange
import androidx.compose.material3.Button
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.core.content.ContextCompat
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import coil.compose.rememberAsyncImagePainter
import com.example.harupin.roomDB.MemoDatabase
import com.example.harupin.roomDB.MemoEntity
import com.example.harupin.viewmodel.MemoRepository
import com.example.harupin.viewmodel.MemoViewModel
import com.example.harupin.viewmodel.MemoViewModelFactory

@Composable
fun MemoScreen(
    navController: NavController,
    lat: Double,
    lng: Double,
    edit: Boolean
) {
    val context = LocalContext.current
    var hasGalleryPermission by remember { mutableStateOf(true) } // Í∏∞Î≥∏ true ‚Üí falseÎêòÎ©¥ Î≤ÑÌäº ÎßâÌûò
    val permissionLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.RequestPermission()
    ) { isGranted: Boolean ->
        hasGalleryPermission = isGranted
        if (!isGranted) {
            Toast.makeText(context, "ÏÇ¨ÏßÑÏùÑ Ï∂îÍ∞ÄÌïòÎ†§Î©¥ Í∞§Îü¨Î¶¨ Ï†ëÍ∑º Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.", Toast.LENGTH_SHORT).show()
        }
    }

    LaunchedEffect(Unit) {
        val permission = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            android.Manifest.permission.READ_MEDIA_IMAGES
        } else {
            android.Manifest.permission.READ_EXTERNAL_STORAGE
        }

        val granted = ContextCompat.checkSelfPermission(context, permission) == PackageManager.PERMISSION_GRANTED
        hasGalleryPermission = granted

        if (!granted) {
            permissionLauncher.launch(permission)
        }
    }

    val db = MemoDatabase.getDatabase(context)
    val viewModelFactory = MemoViewModelFactory(MemoRepository(db))
    val viewModel: MemoViewModel = viewModel(factory = viewModelFactory)

    var isEditMode by remember { mutableStateOf(edit) }


    val imageUris = remember { mutableStateOf<List<Uri>>(emptyList()) }

    val imagePicker = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.GetMultipleContents()
    ) { uris: List<Uri> ->
        imageUris.value = uris.take(3) // ÏµúÎåÄ 3Ïû•ÍπåÏßÄ ÏÑ†ÌÉù
    }

    var title by remember { mutableStateOf("") }
    var location by remember { mutableStateOf("") }
    var content by remember { mutableStateOf("") }
    var selectedWeather by remember { mutableStateOf("") }
    val calendar = remember { Calendar.getInstance() }

    var selectedDate by remember {
        mutableStateOf(
            "%04d-%02d-%02d".format(
                calendar.get(Calendar.YEAR),
                calendar.get(Calendar.MONTH) + 1,
                calendar.get(Calendar.DAY_OF_MONTH)
            )
        )
    }

    val datePickerDialog = DatePickerDialog(
        context,
        { _, year, month, dayOfMonth ->
            selectedDate = "%04d-%02d-%02d".format(year, month + 1, dayOfMonth)
            calendar.set(year, month, dayOfMonth)
        },
        calendar.get(Calendar.YEAR),
        calendar.get(Calendar.MONTH),
        calendar.get(Calendar.DAY_OF_MONTH)
    )

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 4.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            // üìç ÏúÑÎèÑ/Í≤ΩÎèÑ ÌëúÏãú
            Text(
                text = String.format("Í≤ΩÎèÑ: %.1f ÏúÑÎèÑ: %.1f", lat, lng),
                style = MaterialTheme.typography.bodyMedium
            )
            if (isEditMode) {
                // Ìé∏Ïßë Ï§ëÏùº Îïå "Ï∑®ÏÜå"Î°ú Ìé∏Ïßë Ï¢ÖÎ£å
                Button(onClick = { isEditMode = false }) {
                    Text("Ï∑®ÏÜå")
                }
            } else {
                // ÏùΩÍ∏∞ Ï†ÑÏö©Ïùº Îïå "Îã´Í∏∞"Î°ú ÌôîÎ©¥ ÎÇòÍ∞ÄÍ∏∞
                Button(onClick = { navController.popBackStack() }) {
                    Text("Îã´Í∏∞")
                }
            }
        }

        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(8.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // üå§Ô∏è ÎÇ†Ïî® Ïù¥Î™®ÏßÄ ÏÑ†ÌÉùÍ∏∞
            Row(horizontalArrangement = Arrangement.spacedBy(6.dp)) {
                val weatherOptions = listOf("‚òÄÔ∏è", "üå§Ô∏è", "üåßÔ∏è", "‚õàÔ∏è", "‚ùÑÔ∏è", "üå´Ô∏è")
                weatherOptions.forEach { emoji ->
                    val isSelected = selectedWeather == emoji
                    Box(
                        modifier = Modifier
                            .size(30.dp)
                            .then(
                                if (isSelected) Modifier.border(
                                    width = 1.dp,
                                    color = MaterialTheme.colorScheme.primary,
                                    shape = RoundedCornerShape(50)
                                ) else Modifier
                            )
                            .clickable(enabled = isEditMode) { selectedWeather = emoji },
                        contentAlignment = Alignment.Center
                    ) {
                        Text(text = emoji, style = MaterialTheme.typography.titleMedium)
                    }
                }
            }

            // ÎÇ†Ïßú ÏÑ†ÌÉù Î≤ÑÌäº (Îã¨Î†• ÏïÑÏù¥ÏΩò Ìè¨Ìï®)
            OutlinedButton(
                onClick = { datePickerDialog.show() },
                enabled = isEditMode,
                modifier = Modifier
                    .height(48.dp)
                    .width(140.dp),
                contentPadding = PaddingValues(0.dp)
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 8.dp), // ÏµúÏÜå ÏàòÌèâ Ïó¨Î∞±Îßå ÎÇ®ÍπÄ
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.DateRange,
                        contentDescription = "ÎÇ†Ïßú ÏÑ†ÌÉù"
                    )
                    Spacer(modifier = Modifier.width(6.dp))
                    Text(text = selectedDate)
                }
            }

        }
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(8.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Ï†úÎ™© ÏûÖÎ†•ÎûÄ - ÎÑìÍ≤å ÌôïÏû•
            OutlinedTextField(
                value = title,
                enabled = isEditMode,
                onValueChange = { title = it },
                label = { Text("Ï†úÎ™©") },
                modifier = Modifier
                    .height(56.dp)
                    .weight(1f)
            )

            // Ïû•ÏÜå ÏûÖÎ†•ÎûÄ - Í≥†Ï†ï ÎÑàÎπÑ
            OutlinedTextField(
                value = location,
                enabled = isEditMode,
                onValueChange = { location = it },
                label = { Text("Ïû•ÏÜå") },
                modifier = Modifier
                    .height(56.dp)
                    .width(100.dp)
            )
        }




        OutlinedTextField(
            value = content,
            enabled = isEditMode,
            onValueChange = { content = it },
            label = { Text("ÎÇ¥Ïö©") },
            modifier = Modifier
                .fillMaxWidth()
                .height(150.dp)
        )

        Text(text = "ÏÇ¨ÏßÑ Ï∂îÍ∞Ä (ÏµúÎåÄ 3Ïû•)", style = MaterialTheme.typography.labelMedium)

        Row(
            horizontalArrangement = Arrangement.spacedBy(8.dp),
            modifier = Modifier.fillMaxWidth()
        ) {
            // ÏÑ†ÌÉùÎêú Ïù¥ÎØ∏ÏßÄ Î≥¥Ïó¨Ï£ºÍ∏∞
            imageUris.value.forEach { uri ->
                Image(
                    painter = rememberAsyncImagePainter(uri),
                    contentDescription = null,
                    modifier = Modifier
                        .size(80.dp)
                        .border(1.dp, MaterialTheme.colorScheme.primary)
                )
            }

            // Ïù¥ÎØ∏ÏßÄÍ∞Ä 3Ïû•Î≥¥Îã§ Ï†ÅÏùÑ ÎïåÎßå Î≤ÑÌäº Î≥¥Ïù¥Í∏∞
            if (imageUris.value.size < 3 && isEditMode && hasGalleryPermission) {
                Button(
                    onClick = { imagePicker.launch("image/*") },
                    modifier = Modifier.height(80.dp)
                ) {
                    Text("Ï∂îÍ∞Ä")
                }
            } else if (!hasGalleryPermission && isEditMode) {
                Text(
                    text = "ÏÇ¨ÏßÑ Ï∂îÍ∞Ä Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§",
                    color = Color.Red,
                    style = MaterialTheme.typography.bodySmall,
                    modifier = Modifier.align(Alignment.CenterVertically)
                )
            }
        }


        if (isEditMode) {
            Button(
                onClick = {
                    val year = calendar.get(Calendar.YEAR)
                    val month = calendar.get(Calendar.MONTH) + 1
                    val date = selectedDate
                    val time = "%02d:%02d".format(
                        calendar.get(Calendar.HOUR_OF_DAY),
                        calendar.get(Calendar.MINUTE)
                    )

                    val memo = MemoEntity(
                        title = title,
                        content = content,
                        year = year,
                        month = month,
                        date = date,
                        time = time,
                        latitude = lat,
                        longitude = lng,
                        locationName = location,
                        weather = selectedWeather.ifEmpty { "‚òÄÔ∏è" },
                        imageUri1 = imageUris.value.getOrNull(0)?.toString(),
                        imageUri2 = imageUris.value.getOrNull(1)?.toString(),
                        imageUri3 = imageUris.value.getOrNull(2)?.toString()
                    )
                    viewModel.insertMemo(memo)
                    isEditMode = false
                    navController.navigate("home")
                    //navController.popBackStack()
                },
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Î©îÎ™® Ï†ÄÏû•ÌïòÍ∏∞")
            }
        }
    }
}

@Composable
fun MemoScreen(
    navController: NavController,
    id: Int,
    edit: Boolean
) {
    val context = LocalContext.current
    var hasGalleryPermission by remember { mutableStateOf(true) }
    val permissionLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.RequestPermission()
    ) { isGranted ->
        hasGalleryPermission = isGranted
        if (!isGranted) {
            Toast.makeText(context, "ÏÇ¨ÏßÑÏùÑ Ï∂îÍ∞ÄÌïòÎ†§Î©¥ Í∞§Îü¨Î¶¨ Ï†ëÍ∑º Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.", Toast.LENGTH_SHORT).show()
        }
    }

    LaunchedEffect(Unit) {
        val permission = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            android.Manifest.permission.READ_MEDIA_IMAGES
        } else {
            android.Manifest.permission.READ_EXTERNAL_STORAGE
        }
        val granted = ContextCompat.checkSelfPermission(context, permission) == PackageManager.PERMISSION_GRANTED
        hasGalleryPermission = granted
        if (!granted) permissionLauncher.launch(permission)
    }

    val db = MemoDatabase.getDatabase(context)
    val viewModelFactory = MemoViewModelFactory(MemoRepository(db))
    val viewModel: MemoViewModel = viewModel(factory = viewModelFactory)
    val memo by viewModel.searchResults.collectAsState()
    var isEditMode by remember { mutableStateOf(edit) }

    var title by remember { mutableStateOf("") }
    var content by remember { mutableStateOf("") }
    var location by remember { mutableStateOf("") }
    var selectedWeather by remember { mutableStateOf("") }
    var selectedDate by remember { mutableStateOf("") }
    val imageUris = remember { mutableStateOf<List<Uri>>(emptyList()) }
    val calendar = remember { Calendar.getInstance() }

    val imagePicker = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.GetMultipleContents()
    ) { uris -> imageUris.value = uris.take(3) }

    val datePickerDialog = DatePickerDialog(
        context,
        { _, year, month, day ->
            selectedDate = "%04d-%02d-%02d".format(year, month + 1, day)
            calendar.set(year, month, day)
        },
        calendar.get(Calendar.YEAR),
        calendar.get(Calendar.MONTH),
        calendar.get(Calendar.DAY_OF_MONTH)
    )

    LaunchedEffect(id) { viewModel.getById(id) }
    LaunchedEffect(memo) {
        memo.firstOrNull()?.let {
            title = it.title
            content = it.content
            location = it.locationName ?: ""
            selectedWeather = it.weather
            selectedDate = it.date
            imageUris.value = listOfNotNull(it.imageUri1, it.imageUri2, it.imageUri3).map { uri -> Uri.parse(uri) }
        }
    }

    memo.firstOrNull()?.let { currentMemo ->
        Column(
            modifier = Modifier.fillMaxSize().padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text("Í≤ΩÎèÑ: %.1f ÏúÑÎèÑ: %.1f".format(currentMemo.latitude, currentMemo.longitude))
                Button(onClick = {
                    if (isEditMode) isEditMode = false else navController.popBackStack()
                }) { Text(if (isEditMode) "Ï∑®ÏÜå" else "Îã´Í∏∞") }
            }

            Row(horizontalArrangement = Arrangement.spacedBy(6.dp)) {
                val options = listOf("‚òÄÔ∏è", "üå§Ô∏è", "üåßÔ∏è", "‚õàÔ∏è", "‚ùÑÔ∏è", "üå´Ô∏è")
                options.forEach { emoji ->
                    val selected = selectedWeather == emoji
                    Box(
                        modifier = Modifier.size(30.dp)
                            .then(if (selected) Modifier.border(1.dp, MaterialTheme.colorScheme.primary, RoundedCornerShape(50)) else Modifier)
                            .clickable(isEditMode) { selectedWeather = emoji },
                        contentAlignment = Alignment.Center
                    ) {
                        Text(emoji)
                    }
                }
                OutlinedButton(
                    onClick = { datePickerDialog.show() },
                    enabled = isEditMode,
                    modifier = Modifier.height(48.dp).width(140.dp),
                    contentPadding = PaddingValues(0.dp)
                ) {
                    Icon(Icons.Default.DateRange, contentDescription = null)
                    Spacer(modifier = Modifier.width(6.dp))
                    Text(text = selectedDate)
                }
            }

            Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                OutlinedTextField(value = title, onValueChange = { title = it }, label = { Text("Ï†úÎ™©") }, enabled = isEditMode, modifier = Modifier.weight(1f))
                OutlinedTextField(value = location, onValueChange = { location = it }, label = { Text("Ïû•ÏÜå") }, enabled = isEditMode, modifier = Modifier.width(100.dp))
            }

            OutlinedTextField(value = content, onValueChange = { content = it }, label = { Text("ÎÇ¥Ïö©") }, enabled = isEditMode, modifier = Modifier.fillMaxWidth().height(150.dp))

            Text("ÏÇ¨ÏßÑ Ï∂îÍ∞Ä (ÏµúÎåÄ 3Ïû•)", style = MaterialTheme.typography.labelMedium)
            Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                imageUris.value.forEach { uri ->
                    Image(painter = rememberAsyncImagePainter(uri), contentDescription = null, modifier = Modifier.size(80.dp).border(1.dp, MaterialTheme.colorScheme.primary))
                }
                if (imageUris.value.size < 3 && isEditMode && hasGalleryPermission) {
                    Button(onClick = { imagePicker.launch("image/*") }, modifier = Modifier.height(80.dp)) {
                        Text("Ï∂îÍ∞Ä")
                    }
                }
            }

            if (!isEditMode) {
                Button(onClick = { isEditMode = true }, modifier = Modifier.fillMaxWidth()) {
                    Text("Ìé∏ÏßëÌïòÍ∏∞")
                }
            } else {
                Button(onClick = {
                    val updated = currentMemo.copy(
                        title = title,
                        content = content,
                        locationName = location,
                        weather = selectedWeather,
                        date = selectedDate,
                        imageUri1 = imageUris.value.getOrNull(0)?.toString(),
                        imageUri2 = imageUris.value.getOrNull(1)?.toString(),
                        imageUri3 = imageUris.value.getOrNull(2)?.toString()
                    )
                    viewModel.updateMemo(updated)
                    isEditMode = false
                }, modifier = Modifier.fillMaxWidth()) {
                    Text("Ï†ÄÏû•")
                }
            }
        }
    } ?: Text("Î©îÎ™® Î∂àÎü¨Ïò§Îäî Ï§ë...")
}
