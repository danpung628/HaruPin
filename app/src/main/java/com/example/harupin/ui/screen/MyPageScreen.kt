package com.example.harupin.ui.screen

import androidx.compose.foundation.clickable
import androidx.compose.foundation.combinedClickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.filled.FavoriteBorder
import androidx.compose.material.icons.filled.Menu
import androidx.compose.material.icons.filled.Star
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.DrawerValue
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.ModalDrawerSheet
import androidx.compose.material3.ModalNavigationDrawer
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.rememberDrawerState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.example.harupin.roomDB.MemoDatabase
import com.example.harupin.roomDB.MemoEntity
import com.example.harupin.viewmodel.MemoRepository
import com.example.harupin.viewmodel.MemoViewModel
import com.example.harupin.viewmodel.MemoViewModelFactory
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MyPageScreen(navController: NavController) {
    val context = LocalContext.current
    val database = MemoDatabase.getDatabase(context)
    val repository = MemoRepository(database)
    val viewModel: MemoViewModel = viewModel(factory = MemoViewModelFactory(repository))

    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)
    val coroutineScope = rememberCoroutineScope()

    // allMemosÎ•º Í∏∞Î≥∏ÏúºÎ°ú ÏÇ¨Ïö©ÌïòÍ≥†, ÌïÑÌÑ∞ÎßÅ ÏãúÏóêÎäî searchResults ÏÇ¨Ïö©
    val allMemos by viewModel.allMemos.collectAsState()
    val filteredMemos by viewModel.searchResults.collectAsState()

    // Ï¶êÍ≤®Ï∞æÍ∏∞ ÌïÑÌÑ∞ ÏÉÅÌÉú Ï∂îÍ∞Ä
    var showOnlyFavorites by remember { mutableStateOf(false) }

    // ÌòÑÏû¨ ÌëúÏãúÌï† Î©îÎ™® Î™©Î°ù Í≤∞Ï†ï
    val baseMemos =
        if (filteredMemos.isEmpty() && allMemos.isNotEmpty()) allMemos else filteredMemos
    val displayMemos = if (showOnlyFavorites) {
        baseMemos.filter { it.isFavorite == true } // Ï¶êÍ≤®Ï∞æÍ∏∞ ÌïÑÌÑ∞ÎßÅ
    } else {
        baseMemos
    }

    var expandedYears by remember { mutableStateOf(setOf<String>()) }
    var expandedMonths by remember { mutableStateOf(setOf<String>()) }

    // Ïª¥Ìè¨ÎÑåÌä∏ ÏãúÏûë Ïãú Ï†ÑÏ≤¥ Î©îÎ™® Î°úÎìú
    LaunchedEffect(Unit) {
        viewModel.getAllMemos()
    }

    // ÌñÑÎ≤ÑÍ±∞Î∞îÍ∞Ä Ïó¥Î¶¥ ÎïåÎßàÎã§ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
    LaunchedEffect(drawerState.isOpen) {
        if (drawerState.isOpen) {
            expandedYears = setOf()
            expandedMonths = setOf()
        }
    }

    ModalNavigationDrawer(
        drawerState = drawerState,
        drawerContent = {
            ModalDrawerSheet {
                DrawerContent(
                    allMemos = allMemos,
                    displayMemos = displayMemos,
                    onYearSelected = { year ->
                        expandedYears = if (expandedYears.contains(year)) {
                            expandedYears - year
                        } else {
                            expandedYears + year
                        }
                        viewModel.filterMemosByYear(null)
                    },
                    onMonthSelected = { year, month ->
                        viewModel.filterMemosByYearAndMonth(year, month)
                        expandedYears = setOf()
                        expandedMonths = setOf()
                        coroutineScope.launch {
                            drawerState.close()
                        }
                    },
                    onMemoSelected = { memo ->
                        navController.navigate("memo_detail/${memo.id}")
                        expandedYears = setOf()
                        expandedMonths = setOf()
                        coroutineScope.launch {
                            drawerState.close()
                        }
                    },
                    expandedYears = expandedYears,
                    expandedMonths = expandedMonths
                )
            }
        }
    ) {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = { Text(text = "ÎßàÏù¥ÌéòÏù¥ÏßÄ") },
                    navigationIcon = {
                        IconButton(onClick = {
                            if (drawerState.isOpen) {
                                expandedYears = setOf()
                                expandedMonths = setOf()
                                coroutineScope.launch {
                                    drawerState.close()
                                }
                            } else {
                                coroutineScope.launch {
                                    drawerState.open()
                                }
                            }
                        }) {
                            Icon(
                                imageVector = Icons.Default.Menu,
                                contentDescription = "Î©îÎâ¥ Ïó¥Í∏∞"
                            )
                        }
                    },
                    actions = {
                        // Ï¶êÍ≤®Ï∞æÍ∏∞ ÌïÑÌÑ∞ Î≤ÑÌäº Ï∂îÍ∞Ä
                        IconButton(onClick = {
                            showOnlyFavorites = !showOnlyFavorites
                        }) {
                            Icon(
                                imageVector = Icons.Filled.Star,
                                contentDescription = if (showOnlyFavorites) "Ï†ÑÏ≤¥ Î≥¥Í∏∞" else "Ï¶êÍ≤®Ï∞æÍ∏∞Îßå Î≥¥Í∏∞",
                                tint = if (showOnlyFavorites) {
                                    MaterialTheme.colorScheme.primary // ÌôúÏÑ±Ìôî Ïãú ÌÖåÎßàÏùò primary ÏÉâÏÉÅ ÏÇ¨Ïö©
                                } else {
                                    MaterialTheme.colorScheme.onSurfaceVariant // ÎπÑÌôúÏÑ±Ìôî Ïãú ÏïΩÍ∞Ñ Ïó∞Ìïú ÌöåÏÉâ
                                }
                            )
                        }
                    }
                )
            }
        ) { contentPadding ->
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(contentPadding)
            ) {
                PageList(
                    list = displayMemos,
                    navController = navController,
                    onFavoriteToggle = { memo ->
                        viewModel.updateMemoFavorite(
                            memo.id,
                            !(memo.isFavorite ?: false)
                        )
                    },
                    // üëá Ïù¥ Î∂ÄÎ∂ÑÏùÑ Ï∂îÍ∞ÄÌïòÏó¨ ÏÇ≠Ï†ú ÏöîÏ≤≠ÏùÑ Ï≤òÎ¶¨Ìï©ÎãàÎã§.
                    onDeleteRequest = { memo ->
                        viewModel.deleteMemo(memo)
                    }
                )
            }
        }
    }
}

@Composable
fun DrawerContent(
    allMemos: List<MemoEntity>,
    displayMemos: List<MemoEntity>,
    onYearSelected: (String) -> Unit,
    onMonthSelected: (String, String) -> Unit,
    onMemoSelected: (MemoEntity) -> Unit,
    expandedYears: Set<String>,
    expandedMonths: Set<String>
) {
    val years = allMemos.map { it.date.split("-")[0] }.distinct().sortedDescending()

    LazyColumn(
        modifier = Modifier.fillMaxWidth()
    ) {
        years.forEach { year ->
            item {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .clickable { onYearSelected(year) }
                        .padding(horizontal = 16.dp, vertical = 8.dp)
                ) {
                    Text(
                        text = "${year}ÎÖÑ",
                        fontSize = 18.sp,
                        modifier = Modifier.weight(1f)
                    )
                }
            }

            if (expandedYears.contains(year)) {
                val months = allMemos
                    .filter { it.date.startsWith(year) }
                    .map { it.date.split("-")[1] }
                    .distinct()
                    .sortedDescending()

                months.forEach { month ->
                    item {
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .clickable { onMonthSelected(year, month) }
                                .padding(horizontal = 32.dp, vertical = 8.dp)
                        ) {
                            Text(
                                text = "${month}Ïõî",
                                fontSize = 16.sp,
                                modifier = Modifier.weight(1f)
                            )
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun PageList(
    list: List<MemoEntity>,
    navController: NavController,
    onFavoriteToggle: (MemoEntity) -> Unit,
    onDeleteRequest: (MemoEntity) -> Unit // 1. ÏΩúÎ∞± Ìï®Ïàò Ï∂îÍ∞Ä
) {
    if (list.isEmpty()) {
        // ... (ÎÇ¥Ïö© ÎèôÏùº)
    } else {
        LazyColumn {
            items(list) { memo ->
                Page(
                    memo = memo,
                    modifier = Modifier,
                    onClicked = { navController.navigate("memo?id=${memo.id}") },
                    onFavoriteToggle = onFavoriteToggle,
                    onDeleteRequest = onDeleteRequest // 2. PageÏóêÍ≤å Í∑∏ÎåÄÎ°ú Ï†ÑÎã¨
                )
            }
        }
    }
}

@Composable
fun Page(
    memo: MemoEntity,
    modifier: Modifier = Modifier,
    onClicked: () -> Unit,
    onFavoriteToggle: (MemoEntity) -> Unit,
    onDeleteRequest: (MemoEntity) -> Unit
) {
    var showDialog by remember { mutableStateOf(false) }

    if (showDialog) {
        DeleteConfirmDialog(
            onConfirm = {
                onDeleteRequest(memo)
                showDialog = false
            },
            onDismiss = {
                showDialog = false
            }
        )
    }

    val cardContainerColor = if (memo.isFavorite == true) {
        MaterialTheme.colorScheme.primaryContainer // Ï¶êÍ≤®Ï∞æÍ∏∞Îêú Ïπ¥ÎìúÏùò Î∞∞Í≤ΩÏÉâ
    } else {
        CardDefaults.cardColors().containerColor // Í∏∞Î≥∏ Ïπ¥Îìú Î∞∞Í≤ΩÏÉâ
    }


    Card(
        modifier = modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp, vertical = 8.dp)
            .clickable(onClick = onClicked),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(
            containerColor = cardContainerColor
        )
    ) {
        Row(
            modifier = Modifier
                .combinedClickable(
                    onLongClick = { showDialog = true },
                    onClick = onClicked
                )
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Column(
                modifier = Modifier.weight(1f),
                verticalArrangement = Arrangement.spacedBy(4.dp) // ÌÖçÏä§Ìä∏ ÏÇ¨Ïù¥ Í∞ÑÍ≤© Ï∂îÍ∞Ä
            ) {
                Text(
                    text = memo.title,
                    style = MaterialTheme.typography.titleLarge
                )
                Text(
                    text = "ÎÇ†Ïßú: ${memo.date} ${memo.time}",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
                Text(
                    text = "Ïû•ÏÜå: ${memo.locationName ?: "N/A"}",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }

            IconButton(
                onClick = { onFavoriteToggle(memo) }
            ) {
                Icon(
                    imageVector = if (memo.isFavorite == true) Icons.Filled.Favorite else Icons.Filled.FavoriteBorder,
                    contentDescription = if (memo.isFavorite == true) "Ï¶êÍ≤®Ï∞æÍ∏∞ Ìï¥Ï†ú" else "Ï¶êÍ≤®Ï∞æÍ∏∞ Ï∂îÍ∞Ä",
                    tint = if (memo.isFavorite == true) {
                        MaterialTheme.colorScheme.primary // ÌôúÏÑ±Ìôî Ïãú primary ÏÉâÏÉÅÏúºÎ°ú ÌÜµÏùº
                    } else {
                        MaterialTheme.colorScheme.onSurfaceVariant // ÎπÑÌôúÏÑ±Ìôî Ïãú ÏïΩÍ∞Ñ Ïó∞Ìïú ÌöåÏÉâ
                    }
                )
            }
        }
    }

}


@Composable
fun DeleteConfirmDialog(
    onConfirm: () -> Unit,
    onDismiss: () -> Unit
) {
    AlertDialog(
        onDismissRequest = onDismiss,
        title = { Text("ÏÇ≠Ï†ú ÌôïÏù∏") },
        text = { Text("Ï†ïÎßêÎ°ú ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?") },
        confirmButton = {
            TextButton(onClick = onConfirm) {
                Text("ÎÑ§")
            }
        },
        dismissButton = {
            TextButton(onClick = onDismiss) {
                Text("ÏïÑÎãàÏöî")
            }
        }
    )
}

